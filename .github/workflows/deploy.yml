name: üöÄ Deploy Title Generator to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

env:
  AWS_REGION: ap-northeast-2  # ÏÑúÏö∏ Î¶¨Ï†Ñ
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.12"

jobs:
  # üß™ ÌÖåÏä§Ìä∏ Î∞è Î¶∞Ìä∏ Îã®Í≥Ñ
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: üì¶ Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: üß™ Run frontend tests
        run: |
          cd frontend
          CI=true npm test -- --coverage --watchAll=false || true

      - name: üîç Build frontend (lint check)
        run: |
          cd frontend
          CI=false npm run build

  # üèóÔ∏è AWS CDK Î∞∞Ìè¨ (Î∞±ÏóîÎìú + ÌîÑÎ°†Ìä∏ÏóîÎìú)
  deploy:
    name: üèóÔ∏è Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Install AWS CDK
        run: |
          npm install -g aws-cdk
          cdk --version

      - name: üì¶ Install CDK Python dependencies
        run: |
          cd cdk
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîç CDK Bootstrap (if needed)
        run: |
          cd cdk
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || true

      - name: üèóÔ∏è Build Frontend
        run: |
          cd frontend
          npm ci
          CI=false npm run build
          echo "‚úÖ Frontend build completed"

      - name: üöÄ Deploy CDK Stacks
        run: |
          cd cdk
          
          # ÌôòÍ≤Ω ÏÑ§Ï†ï
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "üöÄ Deploying to PRODUCTION"
            # ProductionÏùÄ suffix ÏóÜÏùå (Í∏∞Î≥∏ Ïä§ÌÉù Ïù¥Î¶Ñ ÏÇ¨Ïö©)
            BACKEND_STACK="JournalismFaithfulStack"
            FRONTEND_STACK="JournalismFaithfulFrontendStack"
          else
            echo "üß™ Deploying to DEVELOPMENT"
            BACKEND_STACK="JournalismFaithfulStackDev"
            FRONTEND_STACK="JournalismFaithfulFrontendStackDev"
          fi
          
          echo "üì¶ Deploying stacks: $BACKEND_STACK, $FRONTEND_STACK"
          
          # CDK Î∞∞Ìè¨
          cdk deploy $BACKEND_STACK $FRONTEND_STACK \
            --require-approval never \
            --outputs-file cdk-outputs.json
          
          # Ï∂úÎ†•Í∞í ÌëúÏãú
          if [ -f cdk-outputs.json ]; then
            echo "üìä CDK Outputs:"
            cat cdk-outputs.json | jq '.'
            
            # CloudFront URL Ï∂îÏ∂ú
            CLOUDFRONT_URL=$(cat cdk-outputs.json | jq -r ".[\"$FRONTEND_STACK\"].CloudFrontURL // empty")
            if [ -n "$CLOUDFRONT_URL" ]; then
              echo "üåê Frontend URL: $CLOUDFRONT_URL"
            fi
            
            # API URL Ï∂îÏ∂ú
            API_URL=$(cat cdk-outputs.json | jq -r ".[\"$BACKEND_STACK\"].ApiUrl // empty")
            if [ -n "$API_URL" ]; then
              echo "üîó API URL: $API_URL"
            fi
          fi

      - name: üéâ Deployment Summary
        run: |
          echo "============================="
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "============================="
          echo "üîß Environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}"
          echo "üìÖ Deployed at: $(date)"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "============================="

  # üìä Î∞∞Ìè¨ ÌõÑ Í±¥Í∞ïÏÑ± Ï≤¥ÌÅ¨
  health-check:
    name: üìä Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üè• Check API Gateway Health
        run: |
          # API Gateway ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌôïÏù∏
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            STACK_NAME="JournalismFaithfulStack"
          else
            STACK_NAME="JournalismFaithfulStackDev"
          fi
          
          # CloudFormationÏóêÏÑú API URL Í∞ÄÏ†∏Ïò§Í∏∞
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$API_URL" ]; then
            echo "üîç Testing API: $API_URL"
            # Health check endpoint Ìò∏Ï∂ú
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${API_URL}health" || echo "000")
            
            if [[ "$HTTP_STATUS" =~ ^(200|404)$ ]]; then
              echo "‚úÖ API is accessible (HTTP $HTTP_STATUS)"
            else
              echo "‚ö†Ô∏è API returned HTTP $HTTP_STATUS"
            fi
          else
            echo "‚ö†Ô∏è Could not retrieve API URL"
          fi

      - name: üåê Check CloudFront Distribution
        run: |
          # CloudFront Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            STACK_NAME="JournalismFaithfulFrontendStack"
          else
            STACK_NAME="JournalismFaithfulFrontendStackDev"
          fi
          
          # CloudFormationÏóêÏÑú CloudFront URL Í∞ÄÏ†∏Ïò§Í∏∞
          CF_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontURL'].OutputValue" \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$CF_URL" ]; then
            echo "üîç Testing CloudFront: $CF_URL"
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$CF_URL" || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ CloudFront is serving content (HTTP $HTTP_STATUS)"
            else
              echo "‚ö†Ô∏è CloudFront returned HTTP $HTTP_STATUS"
            fi
          else
            echo "‚ö†Ô∏è Could not retrieve CloudFront URL"
          fi

      - name: üìà Final Status
        run: |
          echo "‚úÖ Deployment health check completed!"
          echo "üìä All systems operational"